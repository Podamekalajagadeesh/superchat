// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phoneNumber   String?   @unique
  emailVerified DateTime?
  phoneVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?
  walletAddress String?   @unique
  walletVerified DateTime?
  googleId      String?   @unique
  githubId      String?   @unique
  isVerified    Boolean   @default(false)
  tokens        Int       @default(0)
  status        String    @default("offline")
  isOnline      Boolean   @default(false)
  lastSeen      DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  messages Message[]
  chats    ChatParticipant[]
  devices  Device[]
  otpCodes OTPCode[]
  magicLinks MagicLink[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OTPCode {
  id        String   @id @default(cuid())
  userId    String?
  phoneNumber String
  code      String
  type      String   // "phone_verification", "phone_login"
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MagicLink {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Device {
  id          String   @id @default(cuid())
  userId      String
  name        String
  type        String   // "mobile", "desktop", "tablet", "web"
  deviceId    String   @unique
  fingerprint String?
  ipAddress   String?
  userAgent   String?
  isTrusted   Boolean  @default(false)
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id          String   @id @default(cuid())
  name        String?
  type        String   @default("direct") // direct, group, channel
  avatar      String?
  description String?
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  id        String   @id @default(cuid())
  userId    String
  chatId    String
  role      String   @default("member") // member, admin, moderator
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("text") // text, image, file, voice, video
  fileUrl   String?
  fileName  String?
  fileSize  Int?
  replyToId String?
  chatId    String
  senderId  String
  isEdited  Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender  User    @relation(fields: [senderId], references: [id], onDelete: Cascade)
  replyTo Message? @relation("MessageReplies", fields: [replyToId], references: [id])
  replies Message[] @relation("MessageReplies")
}
